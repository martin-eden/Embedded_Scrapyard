#include <IRremote.h>

int recvPin = 12;
IRrecv irrecv(recvPin);

void setup( )
{
  Serial.begin(9600);
  irrecv.enableIRIn();
  pinMode(13, OUTPUT);
}

void ircode(decode_results *results)
{
  if (results->decode_type == PANASONIC) {
    Serial.print(results->address, HEX);
    Serial.print(":");
  }
  Serial.print(results->value, HEX);
}

void encoding(decode_results *results)
{
  switch (results->decode_type) {
    default:
    case UNKNOWN:
      Serial.print("UNKNOWN");
      break;
    case NEC:
      Serial.print("NEC");
      break;
    case SONY:
      Serial.print("SONY");
      break;
    case RC5:
      Serial.print("RC5");
      break;
    case RC6:
      Serial.print("RC6");
      break;
    case DISH:
      Serial.print("DISH");
      break;
    case SHARP:
      Serial.print("SHARP");
      break;
    case JVC:
      Serial.print("JVC");
      break;
    case SANYO:
      Serial.print("SANYO");
      break;
    case MITSUBISHI:
      Serial.print("MITSUBISHI");
      break;
    case SAMSUNG:
      Serial.print("SAMSUNG");
      break;
    case LG:
      Serial.print("LG");
      break;
    case WHYNTER:
      Serial.print("WHYNTER");
      break;
    case AIWA_RC_T501:
      Serial.print("AIWA_RC_T501");
      break;
    case PANASONIC:
      Serial.print("PANASONIC");
      break;
    case DENON:
      Serial.print("Denon");
      break;
  }
}

void dumpInfo(decode_results *results)
{
  if (results->overflow) {
    Serial.println("IR code too long. Edit IRremoteInt.h and increase RAWLEN");
    return;
  }

  Serial.print("Encoding  : ");
  encoding(results);
  Serial.println("");

  Serial.print("Code      : ");
  ircode(results);
  Serial.print(" (");
  Serial.print(results->bits, DEC);
  Serial.println(" bits)");
}

void dumpRaw(decode_results *results)
{
  Serial.print("Timing[");
  Serial.print(results->rawlen-1, DEC);
  Serial.println("]: ");

  for (int i = 1; i < results->rawlen; i++) {
    unsigned long x = results->rawbuf[i] * USECPERTICK;
    if (!(i & 1)) {
      Serial.print("-");
      if (x < 1000)
        Serial.print(" ") ;
      if (x < 100)
        Serial.print(" ") ;
      Serial.print(x, DEC);
    } else {
      Serial.print("     ");
      Serial.print("+");
      if (x < 1000)
        Serial.print(" ") ;
      if (x < 100)
        Serial.print(" ") ;
      Serial.print(x, DEC);
      if (i < results->rawlen-1)
        Serial.print(", ");
    }
    if (!(i % 8))
      Serial.println("");
  }
  Serial.println("");
}

void dumpCode(decode_results *results)
{
  Serial.print("unsigned int  ");
  Serial.print("rawData[");
  Serial.print(results->rawlen - 1, DEC);
  Serial.print("] = {");

  for (int i = 1; i < results->rawlen; i++) {
    Serial.print(results->rawbuf[i] * USECPERTICK, DEC);
    if ( i < results->rawlen-1 )
      Serial.print(",");
    if (!(i & 1))
      Serial.print(" ");
  }

  Serial.print("};");

  Serial.print("  // ");
  encoding(results);
  Serial.print(" ");
  ircode(results);

  Serial.println("");

  if (results->decode_type != UNKNOWN) {

    if (results->decode_type == PANASONIC) {
      Serial.print("unsigned int  addr = 0x");
      Serial.print(results->address, HEX);
      Serial.println(";");
    }

    Serial.print("unsigned int  data = 0x");
    Serial.print(results->value, HEX);
    Serial.println(";");
  }
}

int led13_state = 0;

void loop( )
{
  decode_results results;

  if (irrecv.decode(&results)) {
    if (!results.overflow)
    {
      Serial.println(results.value, HEX);
      if (results.value == 0xFF02FD)
      {
        led13_state = led13_state ^ 1;
        Serial.println("Flip LED13");
        Serial.println(led13_state);
      }
      if (led13_state)
        digitalWrite(13, HIGH);
      else
        digitalWrite(13, LOW);
    }
    // dumpInfo(&results);
    // dumpRaw(&results);
    // dumpCode(&results);
    // Serial.println("");
    irrecv.resume();
  }
}

