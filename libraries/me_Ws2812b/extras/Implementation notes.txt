# Quirks

* gcc as effective manager: nops are optimized

  Thank you Richard Stallman and ArduinoIDE guys for "-Os"
  (optimize for size) default compiler option that removes
  successive "nop"'s from "asm" code. Code is so tiny and
  fast now!

  LED stripe is not controlled but who cares?

* AVR gasm shooting his foot

  GNU asm is funny.

  When using "x" (r27:r26) and when using "r" (r0 .. r31),
  it can freely use r26 for "r". Despite it's busy by "x".
  GCC will give warning about undefined code tho.

  Generated bad code is

    ld r26, X+

  Yeah, just load data to register that holds pointer to data
  (and increment it).

* gasm: no Y register for an old man

  My GNU asm does not support "y" for Y register. "x" and "z" are fine
  but not "y".


# GNU asm syntax

In my custom case the format for inlined asm code is

  asm (<code>) : <outputs> : <inputs>;

<outputs> and <inputs> are comma-lists of mappings.

<mapping>

  [<asm_name>] "<output_mode><location>" (<source>)

<output_mode>

  "" - not used for <inputs>

  For <outputs>:

  "+" - load data from <source>
  "=" - just allocate memory of <source>

<location>

  List of possible data locations. (What register use to store data.
  For input we can also use "i" to embed constant in generated code.)

  List of characters. Each character is suitable location.

    "r" - registers r0 .. r31
    "l" - registers r0 .. r15
    "a" - registers r16 .. r23

    "w" - couple of registers (r1:r0 .. r31:r30)
    "x" - couple r27:r26
    "y" - couple r29:r28 // my version of gasm don't recognize this!
    "z" - couple r31:r30

    "i" - constant value. Range of value depends of instruction where
      it is used (may be 3 bits, 5 bits, 8 bits).

      Usage scenario is that constant is defined at higher level of code.

  /*
    My version of gasm does not check that register is not used by
    "x", "y" or "z" couple. So "l" and "a" are used to avoid r26 .. r31.
  */


# EmitBytes(): design and implementation thoughts

  1. Naive implementation

    for bytes
      for bits
        if 0
          High(); Wait_ns(350); Low(); Wait_ns(900);
        if 1
          High(); Wait_ns(900); Low(); Wait_ns(350);

    4 tacts on 16 MHz == 250 ns

    So one-tact instruction takes 62.5 ns.

    6 tacts == 375 ns

    We can't have nanoseconds-delay function.

      1000 ns is just 16 instructions (or less). Overhead of calling
      function with word argument most likely be near that 1000 ns.

      For delays over 1000 ns we have delayMicroseconds().

      We can use macro tho.

        Macros are ugly but that's the only viable option if we
        want to avoid assembly.

    We have no instruction-level control in C (or any other "high-level"
    language). Generating code for if's and for for's is compiler's job.

    So for naive implementation inter-bit and inter-byte delays most likely
    will be over 350 ns. Out of spec.

      I think the actual parser in WS2812B
        just triggers on HIGH,
        waits 350 ns,
        reads line as value and is
        disarmed until line is LOW.

      So naive implementation _may_ work. But meh, it's out of spec
      and underactuated.

  2. Chill windows

    1250 ns per bit is 20 ticks.

    Current implementation uses can offer 7 spare ticks.

    So besides flipping output pin, we can squeeze fancy stuff like
    scaling and dithering in that tacts. (I am looking at you, FastLED!)

    But we won't. It's space-limited hack and ruins design.

  3. More time on sides

    Client is calling SendPixels(), not SendBit().

    We can spend arbitrary long time drinking coffee and preparing
    to send data. Then send it real fast. Then smoke cigarette and
    do cleanup.

  3.1 Prepare direct code

    Can we just convert buffer to AVR instructions and execute them?

    Well, I like this idea but no:

    1. You can't execute memory on AVR. (You can on Intel tho.)
    2. This will bloat memory. 20 ticks for bit means ~ 10-20
      instructions. 10 instructions is like 20 bytes or 160 bits.
      So expansion factor is 160.

      2 KiB memory == 16 KiB bits
      Pixel (3 bytes) == 24 bits
      Expansion factor 160 bits

      So in 2 KiB you can describe 682 LEDs. Or just 4 LEDs if you
      generate direct code.

      Higher clock speeds will increase expansion factor.

    But it's paramount in performance. No comparisons, no jumps.
    8 MBits pedal-to-metal.

  3.2 Prepare intermediate code

    Can we encode switches and waits in artificial instructions
    and interpret them fast?

    We can, but it will expand memory again. Let's not create additional
    buffers and just read data by bits. We need assembly level.


# Timings math fun

  * bit = 1250 ns } ==> byte = 10 us <==> 1 ms = 100 bytes
    byte = 8 bits }

  * meter = 60 pixels } => meter = 1.8 ms ==> second ~ 500 m
    pixel = 3 bytes   }

  * reset delay = 50 us = 5 bytes

  * Theoretical frame rate limits:

      0 pixels:
        1 000 000 / 50 = 20 000 FPS

      60 pixels (1 m):
        1 000 000 / (50 + 1800) ~ 540 FPS

      100 FPS:
        100 = 1 000 000 / (50 + 1800 * X)
        X = 9950 / 1800
        X ~ 5.5 m = 330 pixels
