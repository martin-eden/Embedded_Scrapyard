RBG LED stripe facade. Design notes.

Facade

Okay I want

  Serial text interface to control RGB LED stripe.

  It should be human controllable, moderately verbose output,
  terse input.

Example

  <
    .
  >
    wtf
  <
    -
  >
    ?
  <
    /

    Available commands are

      S - Settings (or Set or State) - represent/modify current state
      R - Run - write state to LED stripe
      H - usage help
    .
  >
    H
  <
    / H

    Hello there!

    I am text interface for LED stripe.

    I am not very chatty because of general no-nonsense attitude.

    Interface is one-char command, optional modifier, integer arguments.

    Omnipresent commands are

      / - go to root menu
      ^ - go one level up in menu
      @ - print position in menu tree
      ? - list available commands

    Modifiers are

      V - verbose output

    Replies are

      . - done, ready for next command
      - - please stop sending commands, I can't process them any more
      / - command is partially applied (can't revert, can't finish)
    .
  >
    / H V
  <
    / H V

    Nah, there is no verbose version of help.

    .
  >
    / @
  <
    /
    .
  >
    / @ V
  <
    You are in "/" menu branch.
    .
  >
    ?




  <
    -
  >
    &
  <
    / wtf

    Can't parse.
    .
  >
    ?
  <
    /

    Available commands are

      S - Settings (or Set or State) - represent/modify current state
      R - Run - write state to LED stripe
      H - usage help
    .
  >
    S
  <
    .
  >
    ?
  <
    / S

    Led stripe:

      Output pin: 14
      Number of LEDs: 60 (180 bytes)

    Available commands are

      O - set Output pin
      N - set Number of LEDs
      M - get/set Memory
    .
  >
    M ?
  <
    / S M

    Memory range is [1, 60].

    Available commands are

      R - get/set Range
      G - Get memory (180 bytes).
      S - set memory (180 bytes).
    .
  >
    R ?
  <
    / S M R

    Available commands are

      G - get range.
      S - set range.
    .
  >
    G
  <
    1 60
    .
  >
    / S M R G ?
  <
    / S M R G

    Memory range is [1, 60].
    .
  >
    ?
  <
    / S M R

    Available commands are

      G - get range.
      S - set range.
    .
  >
    S ?
  <
    / S M R S

    Enter two integers for subrange of [1, 60].
    .
  >
    1 2
  <
    .
  >
    ?
  <
    / S M R

    Available commands are

      G - get range.
      S - set range.
    .
  >
    S 2 3 G
  <
    .
    2 3
    .
  >
    G ?
  <
    / S M R G

    Memory range is [2, 3].
    .
  >
    ^ ?
  <
    / S M

    Memory range is [2, 3].

    Available commands are

      R - set Range
      D - Dump memory (6 bytes)
      S - Set memory (6 bytes)
    .
  >
    S ?
  <
    Enter 6 bytes for green-red-blue values for LEDs in range [1, 2].
    .
  >
    255 0 0  0 0 255
  <
    .
  >
    D
  <
    255 0 0 0 0 255
  >
    How get the fucking range?!
  <
    Sorry, can't parse that.
    .
  >
    ?
  <
    S M

    Memory range is [1, 2].

    Available commands are

      R - set Range
      D - Dump memory (6 bytes)
      S - Set memory (6 bytes)
    .
  >
    ^ ?
  <
    .
  <
    S

    Led stripe:

      Output pin: 14
      Number of LEDs: 60

    Available commands are

      M - get/set Memory
      O - set Output pin
      N - set Number of LEDs
    .
  >
    ^ ?
  <
    ?

    Commands at this level are

      S - State (or Status or Set) - represent/modify current state
      R - Run - write state to LED stripe
    .
  >
    R
  <
    .

/*
  Well, a bit daunting but the interface is interesting.

  Probably tree should be

    ? - help
    S - Set/Status/Settings
      M - Memory
        R - Range
          G - Get
          S - Set
        G
        S
      O - Output pin
        G
        S
      N - Num leds
        G
        S
    R - Run
*/

-- Martin, 2024-05-14
